{"ast":null,"code":"\n\n// import { createContext, useContext, useReducer, useMemo } from \"react\";\n\n// import PropTypes from \"prop-types\";\n\n// const MaterialUI = createContext();\n\n// MaterialUI.displayName = \"MaterialUIContext\";\n\n// // Material Dashboard 2 React reducer\n// function reducer(state, action) {\n//   switch (action.type) {\n//     case \"MINI_SIDENAV\": {\n//       return { ...state, miniSidenav: action.value };\n//     }\n//     case \"TRANSPARENT_SIDENAV\": {\n//       return { ...state, transparentSidenav: action.value };\n//     }\n//     case \"WHITE_SIDENAV\": {\n//       return { ...state, whiteSidenav: action.value };\n//     }\n//     case \"SIDENAV_COLOR\": {\n//       return { ...state, sidenavColor: action.value };\n//     }\n//     case \"TRANSPARENT_NAVBAR\": {\n//       return { ...state, transparentNavbar: action.value };\n//     }\n//     case \"FIXED_NAVBAR\": {\n//       return { ...state, fixedNavbar: action.value };\n//     }\n//     case \"OPEN_CONFIGURATOR\": {\n//       return { ...state, openConfigurator: action.value };\n//     }\n//     case \"DIRECTION\": {\n//       return { ...state, direction: action.value };\n//     }\n//     case \"LAYOUT\": {\n//       return { ...state, layout: action.value };\n//     }\n//     case \"DARKMODE\": {\n//       return { ...state, darkMode: action.value };\n//     }\n//     default: {\n//       throw new Error(`Unhandled action type: ${action.type}`);\n//     }\n//   }\n// }\n\n// // Material Dashboard 2 React context provider\n// function MaterialUIControllerProvider({ children }) {\n//   const initialState = {\n//     miniSidenav: false,\n//     transparentSidenav: false,\n//     whiteSidenav: false,\n//     sidenavColor: \"info\",\n//     transparentNavbar: true,\n//     fixedNavbar: true,\n//     openConfigurator: false,\n//     direction: \"ltr\",\n//     layout: \"dashboard\",\n//     darkMode: false,\n//   };\n\n//   const [controller, dispatch] = useReducer(reducer, initialState);\n\n//   const value = useMemo(() => [controller, dispatch], [controller, dispatch]);\n\n//   return <MaterialUI.Provider value={value}>{children}</MaterialUI.Provider>;\n// }\n\n// // Material Dashboard 2 React custom hook for using context\n// function useMaterialUIController() {\n//   const context = useContext(MaterialUI);\n\n//   if (!context) {\n//     throw new Error(\n//       \"useMaterialUIController should be used inside the MaterialUIControllerProvider.\"\n//     );\n//   }\n\n//   return context;\n// }\n\n// // Typechecking props for the MaterialUIControllerProvider\n// MaterialUIControllerProvider.propTypes = {\n//   children: PropTypes.node.isRequired,\n// };\n\n// // Context module functions\n// const setMiniSidenav = (dispatch, value) => dispatch({ type: \"MINI_SIDENAV\", value });\n// const setTransparentSidenav = (dispatch, value) => dispatch({ type: \"TRANSPARENT_SIDENAV\", value });\n// const setWhiteSidenav = (dispatch, value) => dispatch({ type: \"WHITE_SIDENAV\", value });\n// const setSidenavColor = (dispatch, value) => dispatch({ type: \"SIDENAV_COLOR\", value });\n// const setTransparentNavbar = (dispatch, value) => dispatch({ type: \"TRANSPARENT_NAVBAR\", value });\n// const setFixedNavbar = (dispatch, value) => dispatch({ type: \"FIXED_NAVBAR\", value });\n// const setOpenConfigurator = (dispatch, value) => dispatch({ type: \"OPEN_CONFIGURATOR\", value });\n// const setDirection = (dispatch, value) => dispatch({ type: \"DIRECTION\", value });\n// const setLayout = (dispatch, value) => dispatch({ type: \"LAYOUT\", value });\n// const setDarkMode = (dispatch, value) => dispatch({ type: \"DARKMODE\", value });\n\n// export {\n//   MaterialUIControllerProvider,\n//   useMaterialUIController,\n//   setMiniSidenav,\n//   setTransparentSidenav,\n//   setWhiteSidenav,\n//   setSidenavColor,\n//   setTransparentNavbar,\n//   setFixedNavbar,\n//   setOpenConfigurator,\n//   setDirection,\n//   setLayout,\n//   setDarkMode,\n// };","map":{"version":3,"names":[],"sources":["/home/durai/Documents/projects/TestPlatform/frontend/src/context/index.js"],"sourcesContent":["\n\n// import { createContext, useContext, useReducer, useMemo } from \"react\";\n\n// import PropTypes from \"prop-types\";\n\n\n// const MaterialUI = createContext();\n\n// MaterialUI.displayName = \"MaterialUIContext\";\n\n// // Material Dashboard 2 React reducer\n// function reducer(state, action) {\n//   switch (action.type) {\n//     case \"MINI_SIDENAV\": {\n//       return { ...state, miniSidenav: action.value };\n//     }\n//     case \"TRANSPARENT_SIDENAV\": {\n//       return { ...state, transparentSidenav: action.value };\n//     }\n//     case \"WHITE_SIDENAV\": {\n//       return { ...state, whiteSidenav: action.value };\n//     }\n//     case \"SIDENAV_COLOR\": {\n//       return { ...state, sidenavColor: action.value };\n//     }\n//     case \"TRANSPARENT_NAVBAR\": {\n//       return { ...state, transparentNavbar: action.value };\n//     }\n//     case \"FIXED_NAVBAR\": {\n//       return { ...state, fixedNavbar: action.value };\n//     }\n//     case \"OPEN_CONFIGURATOR\": {\n//       return { ...state, openConfigurator: action.value };\n//     }\n//     case \"DIRECTION\": {\n//       return { ...state, direction: action.value };\n//     }\n//     case \"LAYOUT\": {\n//       return { ...state, layout: action.value };\n//     }\n//     case \"DARKMODE\": {\n//       return { ...state, darkMode: action.value };\n//     }\n//     default: {\n//       throw new Error(`Unhandled action type: ${action.type}`);\n//     }\n//   }\n// }\n\n// // Material Dashboard 2 React context provider\n// function MaterialUIControllerProvider({ children }) {\n//   const initialState = {\n//     miniSidenav: false,\n//     transparentSidenav: false,\n//     whiteSidenav: false,\n//     sidenavColor: \"info\",\n//     transparentNavbar: true,\n//     fixedNavbar: true,\n//     openConfigurator: false,\n//     direction: \"ltr\",\n//     layout: \"dashboard\",\n//     darkMode: false,\n//   };\n\n//   const [controller, dispatch] = useReducer(reducer, initialState);\n\n//   const value = useMemo(() => [controller, dispatch], [controller, dispatch]);\n\n//   return <MaterialUI.Provider value={value}>{children}</MaterialUI.Provider>;\n// }\n\n// // Material Dashboard 2 React custom hook for using context\n// function useMaterialUIController() {\n//   const context = useContext(MaterialUI);\n\n//   if (!context) {\n//     throw new Error(\n//       \"useMaterialUIController should be used inside the MaterialUIControllerProvider.\"\n//     );\n//   }\n\n//   return context;\n// }\n\n// // Typechecking props for the MaterialUIControllerProvider\n// MaterialUIControllerProvider.propTypes = {\n//   children: PropTypes.node.isRequired,\n// };\n\n// // Context module functions\n// const setMiniSidenav = (dispatch, value) => dispatch({ type: \"MINI_SIDENAV\", value });\n// const setTransparentSidenav = (dispatch, value) => dispatch({ type: \"TRANSPARENT_SIDENAV\", value });\n// const setWhiteSidenav = (dispatch, value) => dispatch({ type: \"WHITE_SIDENAV\", value });\n// const setSidenavColor = (dispatch, value) => dispatch({ type: \"SIDENAV_COLOR\", value });\n// const setTransparentNavbar = (dispatch, value) => dispatch({ type: \"TRANSPARENT_NAVBAR\", value });\n// const setFixedNavbar = (dispatch, value) => dispatch({ type: \"FIXED_NAVBAR\", value });\n// const setOpenConfigurator = (dispatch, value) => dispatch({ type: \"OPEN_CONFIGURATOR\", value });\n// const setDirection = (dispatch, value) => dispatch({ type: \"DIRECTION\", value });\n// const setLayout = (dispatch, value) => dispatch({ type: \"LAYOUT\", value });\n// const setDarkMode = (dispatch, value) => dispatch({ type: \"DARKMODE\", value });\n\n// export {\n//   MaterialUIControllerProvider,\n//   useMaterialUIController,\n//   setMiniSidenav,\n//   setTransparentSidenav,\n//   setWhiteSidenav,\n//   setSidenavColor,\n//   setTransparentNavbar,\n//   setFixedNavbar,\n//   setOpenConfigurator,\n//   setDirection,\n//   setLayout,\n//   setDarkMode,\n// };\n"],"mappings":";;AAEA;;AAEA;;AAGA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}