{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport { moveHighlight, listReducer, ListActionTypes } from '../useList';\nimport { SelectActionTypes } from './useSelect.types';\nexport default function selectReducer(state, action) {\n  const {\n    open\n  } = state;\n  const {\n    context: {\n      selectionMode\n    }\n  } = action;\n  switch (action.type) {\n    case SelectActionTypes.buttonClick:\n      {\n        var _state$selectedValues;\n        const itemToHighlight = (_state$selectedValues = state.selectedValues[0]) != null ? _state$selectedValues : moveHighlight(null, 'start', action.context);\n        return _extends({}, state, {\n          open: !open,\n          highlightedValue: !open ? itemToHighlight : null\n        });\n      }\n    case SelectActionTypes.buttonArrowKeyDown:\n      if (action.key === 'ArrowDown') {\n        var _state$selectedValues2;\n        const itemToHighlight = (_state$selectedValues2 = state.selectedValues[0]) != null ? _state$selectedValues2 : moveHighlight(null, 'start', action.context);\n        return _extends({}, state, {\n          open: true,\n          highlightedValue: itemToHighlight\n        });\n      }\n      if (action.key === 'ArrowUp') {\n        var _state$selectedValues3;\n        const itemToHighlight = (_state$selectedValues3 = state.selectedValues[0]) != null ? _state$selectedValues3 : moveHighlight(null, 'end', action.context);\n        return _extends({}, state, {\n          open: true,\n          highlightedValue: itemToHighlight\n        });\n      }\n      break;\n    default:\n      break;\n  }\n  const newState = listReducer(state, action);\n  switch (action.type) {\n    case ListActionTypes.keyDown:\n      if (selectionMode === 'single' && (action.event.key === 'Enter' || action.event.key === ' ' || action.event.key === 'Escape')) {\n        return _extends({}, newState, {\n          open: false\n        });\n      }\n      break;\n    case ListActionTypes.itemClick:\n      if (selectionMode === 'single') {\n        return _extends({}, newState, {\n          open: false\n        });\n      }\n      break;\n    case ListActionTypes.blur:\n      return _extends({}, newState, {\n        open: false\n      });\n    default:\n      return newState;\n  }\n  return newState;\n}","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}