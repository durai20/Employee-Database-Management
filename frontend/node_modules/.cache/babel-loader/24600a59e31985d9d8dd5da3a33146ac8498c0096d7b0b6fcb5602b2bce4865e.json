{"ast":null,"code":"var _jsxFileName = \"/home/durai/Documents/projects/TestPlatform/frontend/src/layouts/dashboard/index.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from \"react\";\nimport Grid from \"@mui/material/Grid\";\nimport MDBox from \"components/MDBox\";\nimport DashboardLayout from \"examples/LayoutContainers/DashboardLayout\";\nimport Footer from \"examples/Footer\";\nimport ComplexStatisticsCard from \"examples/Cards/StatisticsCards/ComplexStatisticsCard\";\nimport { useSession } from \" SessionContext\";\nimport axios from \"axios\"; // Assuming you're using Axios for HTTP requests\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction Dashboard() {\n  _s();\n  const {\n    name,\n    pass\n  } = useSession();\n  const [departmentCounts, setDepartmentCounts] = useState({});\n  useEffect(() => {\n    // Fetch department counts from the backend when component mounts\n    async function fetchDepartmentCounts() {\n      try {\n        const response = await axios.get(\"/api/departmentCounts\"); // Replace \"/api/departmentCounts\" with your actual API endpoint\n        setDepartmentCounts(response.data);\n      } catch (error) {\n        console.error(\"Error fetching department counts:\", error);\n      }\n    }\n    fetchDepartmentCounts();\n  }, []); // Empty dependency array to ensure useEffect only runs once\n\n  return /*#__PURE__*/_jsxDEV(DashboardLayout, {\n    children: [/*#__PURE__*/_jsxDEV(MDBox, {\n      py: 3,\n      children: /*#__PURE__*/_jsxDEV(Grid, {\n        container: true,\n        spacing: 3,\n        children: Object.entries(departmentCounts).map(([department, count]) => /*#__PURE__*/_jsxDEV(Grid, {\n          item: true,\n          xs: 12,\n          md: 6,\n          lg: 3,\n          children: /*#__PURE__*/_jsxDEV(MDBox, {\n            mb: 1.5,\n            children: /*#__PURE__*/_jsxDEV(ComplexStatisticsCard\n            // Assuming you have icons for each department, replace \"icon\" with appropriate value\n            , {\n              icon: getIconForDepartment(department),\n              title: `Total ${department} Department`,\n              count: count,\n              percentage: {\n                color: \"success\",\n                amount: \"\",\n                label: \"Just updated\"\n              }\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 35,\n              columnNumber: 17\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 34,\n            columnNumber: 15\n          }, this)\n        }, department, false, {\n          fileName: _jsxFileName,\n          lineNumber: 33,\n          columnNumber: 13\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 31,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 30,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Footer, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 29,\n    columnNumber: 5\n  }, this);\n}\n\n// Function to get appropriate icon for each department (you need to implement this)\n_s(Dashboard, \"em+5GD1lcX2vDRvViOYPeW/xJ4w=\", false, function () {\n  return [useSession];\n});\n_c = Dashboard;\nfunction getIconForDepartment(department) {\n  // Implement logic to map department names to corresponding icons\n}\nexport default Dashboard;\nvar _c;\n$RefreshReg$(_c, \"Dashboard\");","map":{"version":3,"names":["React","useState","useEffect","Grid","MDBox","DashboardLayout","Footer","ComplexStatisticsCard","useSession","axios","jsxDEV","_jsxDEV","Dashboard","_s","name","pass","departmentCounts","setDepartmentCounts","fetchDepartmentCounts","response","get","data","error","console","children","py","container","spacing","Object","entries","map","department","count","item","xs","md","lg","mb","icon","getIconForDepartment","title","percentage","color","amount","label","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/home/durai/Documents/projects/TestPlatform/frontend/src/layouts/dashboard/index.js"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport Grid from \"@mui/material/Grid\";\nimport MDBox from \"components/MDBox\";\nimport DashboardLayout from \"examples/LayoutContainers/DashboardLayout\";\nimport Footer from \"examples/Footer\";\nimport ComplexStatisticsCard from \"examples/Cards/StatisticsCards/ComplexStatisticsCard\";\nimport { useSession } from \" SessionContext\";\nimport axios from \"axios\"; // Assuming you're using Axios for HTTP requests\n\nfunction Dashboard() {\n  const { name, pass } = useSession();\n  const [departmentCounts, setDepartmentCounts] = useState({});\n\n  useEffect(() => {\n    // Fetch department counts from the backend when component mounts\n    async function fetchDepartmentCounts() {\n      try {\n        const response = await axios.get(\"/api/departmentCounts\"); // Replace \"/api/departmentCounts\" with your actual API endpoint\n        setDepartmentCounts(response.data);\n      } catch (error) {\n        console.error(\"Error fetching department counts:\", error);\n      }\n    }\n\n    fetchDepartmentCounts();\n  }, []); // Empty dependency array to ensure useEffect only runs once\n\n  return (\n    <DashboardLayout>\n      <MDBox py={3}>\n        <Grid container spacing={3}>\n          {Object.entries(departmentCounts).map(([department, count]) => (\n            <Grid item xs={12} md={6} lg={3} key={department}>\n              <MDBox mb={1.5}>\n                <ComplexStatisticsCard\n                  // Assuming you have icons for each department, replace \"icon\" with appropriate value\n                  icon={getIconForDepartment(department)}\n                  title={`Total ${department} Department`}\n                  count={count}\n                  percentage={{\n                    color: \"success\",\n                    amount: \"\",\n                    label: \"Just updated\",\n                  }}\n                />\n              </MDBox>\n            </Grid>\n          ))}\n        </Grid>\n      </MDBox>\n      <Footer />\n    </DashboardLayout>\n  );\n}\n\n// Function to get appropriate icon for each department (you need to implement this)\nfunction getIconForDepartment(department) {\n  // Implement logic to map department names to corresponding icons\n}\n\nexport default Dashboard;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}