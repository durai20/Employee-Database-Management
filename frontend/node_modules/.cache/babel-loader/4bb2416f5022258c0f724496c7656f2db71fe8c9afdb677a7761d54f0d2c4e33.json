{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport * as React from 'react';\nimport { unstable_useForkRef as useForkRef } from '@mui/utils';\nimport useList from '../useList';\nimport { useCompoundParent } from '../utils/useCompound';\nimport menuReducer from './menuReducer';\n\n/**\n *\n * Demos:\n *\n * - [Menu](https://mui.com/base/react-menu/#hooks)\n *\n * API:\n *\n * - [useMenu API](https://mui.com/base/react-menu/hooks-api/#use-menu)\n */\nexport default function useMenu(parameters = {}) {\n  const {\n    defaultOpen,\n    listboxRef: listboxRefProp,\n    open: openProp,\n    onOpenChange\n  } = parameters;\n  const listboxRef = React.useRef(null);\n  const handleRef = useForkRef(listboxRef, listboxRefProp);\n  const {\n    subitems,\n    contextValue: compoundComponentContextValue\n  } = useCompoundParent();\n  const subitemKeys = React.useMemo(() => Array.from(subitems.keys()), [subitems]);\n  const getItemDomElement = React.useCallback(itemId => {\n    var _subitems$get$ref$cur, _subitems$get;\n    if (itemId == null) {\n      return null;\n    }\n    return (_subitems$get$ref$cur = (_subitems$get = subitems.get(itemId)) == null ? void 0 : _subitems$get.ref.current) != null ? _subitems$get$ref$cur : null;\n  }, [subitems]);\n  const controlledProps = React.useMemo(() => ({\n    open: openProp\n  }), [openProp]);\n  const stateChangeHandler = React.useCallback((event, field, fieldValue, reason, state) => {\n    if (field === 'open') {\n      onOpenChange == null ? void 0 : onOpenChange(fieldValue);\n      if (fieldValue === true && state.highlightedValue !== null) {\n        var _subitems$get2, _subitems$get2$ref$cu;\n        (_subitems$get2 = subitems.get(state.highlightedValue)) == null ? void 0 : (_subitems$get2$ref$cu = _subitems$get2.ref.current) == null ? void 0 : _subitems$get2$ref$cu.focus();\n      }\n    }\n  }, [onOpenChange, subitems]);\n  const {\n    dispatch,\n    getRootProps,\n    contextValue: listContextValue,\n    state: {\n      open,\n      highlightedValue\n    },\n    rootRef: mergedListRef\n  } = useList({\n    controlledProps,\n    disabledItemsFocusable: true,\n    focusManagement: 'DOM',\n    getItemDomElement,\n    getInitialState: () => ({\n      selectedValues: [],\n      highlightedValue: null,\n      open: defaultOpen != null ? defaultOpen : false\n    }),\n    isItemDisabled: id => {\n      var _subitems$get3;\n      return (subitems == null ? void 0 : (_subitems$get3 = subitems.get(id)) == null ? void 0 : _subitems$get3.disabled) || false;\n    },\n    items: subitemKeys,\n    itemStringifier: id => {\n      var _subitems$get4, _subitems$get5, _subitems$get5$ref$cu;\n      return ((_subitems$get4 = subitems.get(id)) == null ? void 0 : _subitems$get4.label) || ((_subitems$get5 = subitems.get(id)) == null ? void 0 : (_subitems$get5$ref$cu = _subitems$get5.ref.current) == null ? void 0 : _subitems$get5$ref$cu.innerText);\n    },\n    rootRef: handleRef,\n    onStateChange: stateChangeHandler,\n    reducerActionContext: {\n      listboxRef\n    },\n    selectionMode: 'none',\n    stateReducer: menuReducer\n  });\n  React.useEffect(() => {\n    if (open && highlightedValue === subitemKeys[0]) {\n      var _subitems$get6, _subitems$get6$ref, _subitems$get6$ref$cu;\n      (_subitems$get6 = subitems.get(subitemKeys[0])) == null ? void 0 : (_subitems$get6$ref = _subitems$get6.ref) == null ? void 0 : (_subitems$get6$ref$cu = _subitems$get6$ref.current) == null ? void 0 : _subitems$get6$ref$cu.focus();\n    }\n  }, [open, highlightedValue, subitems, subitemKeys]);\n  React.useEffect(() => {\n    var _listboxRef$current;\n    // set focus to the highlighted item (but prevent stealing focus from other elements on the page)\n    if ((_listboxRef$current = listboxRef.current) != null && _listboxRef$current.contains(document.activeElement) && highlightedValue !== null) {\n      var _subitems$get7, _subitems$get7$ref$cu;\n      subitems == null ? void 0 : (_subitems$get7 = subitems.get(highlightedValue)) == null ? void 0 : (_subitems$get7$ref$cu = _subitems$get7.ref.current) == null ? void 0 : _subitems$get7$ref$cu.focus();\n    }\n  }, [highlightedValue, subitems]);\n  const getListboxProps = (otherHandlers = {}) => {\n    const rootProps = getRootProps(otherHandlers);\n    return _extends({}, otherHandlers, rootProps, {\n      role: 'menu'\n    });\n  };\n  React.useDebugValue({\n    subitems,\n    highlightedValue\n  });\n  return {\n    contextValue: _extends({}, compoundComponentContextValue, listContextValue),\n    dispatch,\n    getListboxProps,\n    highlightedValue,\n    listboxRef: mergedListRef,\n    menuItems: subitems,\n    open\n  };\n}","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}